buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath(group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true) {
            exclude group: 'trove', module: 'trove'
        }
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

plugins {
    id "com.palantir.git-version" version "0.11.0"
    id 'de.fuerstenau.buildconfig' version '1.1.8'
}

apply plugin: 'kotlin'
apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'idea'

version = "$mcVersion-${gitVersion()}"
group = "me.sargunvohra.${modId}"
archivesBaseName = modId

compileKotlin {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    kotlinOptions {
        jvmTarget = "1.8"
    }
}

minecraft {
    mappings channel: 'snapshot', version: "${mappingsVersion}-${mcVersion}".toString()
    accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
    }
}

repositories {
    jcenter()
    maven { url 'https://minecraft.curseforge.com/api/maven/' }
}

configurations {
    ktlint
    mod
}

dependencies {
    minecraft "net.minecraftforge:forge:${mcVersion}-${forgeVersion}"
    compile "kottle:Kottle:$kottleVersion"
    mod "kottle:Kottle:$kottleVersion"
    ktlint "com.github.shyiko:ktlint:$ktlintVersion"
}

processResources {
    inputs.property "modVersion", project.version
    inputs.property "mcVersion", project.properties.mcVersion
    inputs.property "loaderVersion", project.properties.loaderVersion
    inputs.property "modId", project.properties.modId
    inputs.property "forgeAcceptedVersion", project.properties.forgeAcceptedVersion

    eachFile { file ->
        if (file.name.endsWith('.toml') || file.name.endsWith('.mcmeta')) {
            file.expand(
                    modId: modId,
                    modVersion: project.version,
                    mcVersion: mcVersion,
                    loaderVersion: loaderVersion,
                    forgeAcceptedVersion: forgeAcceptedVersion,
            )
        }
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : modId,
                "Specification-Vendor"    : project.group,
                "Specification-Version"   : "1.0",
                "Implementation-Title"    : modId,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : project.group,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ],)
    }
}

//noinspection GroovyAssignabilityCheck
task ktlint(type: JavaExec, group: "verification") {
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    //noinspection GroovyAssignabilityCheck
    args "src/**/*.kt"
}

//noinspection GroovyAssignabilityCheck
task ktlintFormat(type: JavaExec, group: "formatting") {
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    //noinspection GroovyAssignabilityCheck
    args "-F", "src/**/*.kt"
}

//noinspection GroovyAssignabilityCheck
task ktlintApplyToIdea(type: JavaExec, group: "formatting") {
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    //noinspection GroovyAssignabilityCheck
    args "--apply-to-idea-project", "-y"
}

//noinspection GroovyAssignabilityCheck
task installMods(type: Copy, dependsOn: "deinstallMods") {
    from { configurations.mod }
    include "**/*.jar"
    into file("run/mods")
}

//noinspection GroovyAssignabilityCheck
task deinstallMods(type: Delete) {
    delete fileTree(dir: "run/mods", include: "*.jar")
}

project.afterEvaluate {
    project.tasks['check'].dependsOn(project.tasks['ktlint'])
    project.tasks['prepareRuns'].dependsOn(project.tasks['installMods'])
}
